openapi: 3.0.0

info:
  title: Cartesi HTTP Dispatcher API
  version: 0.1.0
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

  description: |
    API that the Cartesi Server HTTP-Dispatcher implements.

paths:
  /voucher:
    post:
      operationId: addVoucher
      summary: Add a new voucher
      description: |
        The DApp can call this method to add a new voucher for the given input.
        A voucher is a collateral effects actionable in the blockchain.
        This method can only be called after the DApp received an advance state request.
        Until the DApp calls the finish method, this method can be called any number of times.
        Calling this method after finishing is undefined behavior.

        The returned index is the position of the voucher in the merkle tree.
        The index counting restarts at every input.

      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/Voucher'

      responses:
        '201':
          description: Created the voucher.
          content:
            application/json:
              schema:
                type: object
                properties:
                  index:
                    $ref: 'components.yaml#/Index'

        default:
          description: Error response.
          content:
            text/plain:
              schema:
                $ref: 'components.yaml#/Error'

  /notice:
    post:
      operationId: addNotice
      summary: Add a new notice
      description: |
        The DApp can call this method to add a new notice for the given input.
        A notice describes any relevant changes to the internal state of the DApp.
        This method can only be called after the DApp received an advance state request.
        Until the DApp calls the finish method, this method can be called any number of times.
        Calling this method after finishing is undefined behavior.

        The returned index is the position of the notice in the merkle tree.
        The index counting restarts at every input.

      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/Notice'

      responses:
        '201':
          description: Created the notice.
          content:
            application/json:
              schema:
                type: object
                properties:
                  index:
                    $ref: 'components.yaml#/Index'

        default:
          description: Error response.
          content:
            text/plain:
              schema:
                $ref: 'components.yaml#/Error'

  /report:
    post:
      operationId: addReport
      summary: Add a new report
      description: |
        The DApp can call this method to add a new report for the given input.
        A report can be a diagnostic or a log; reports are not discarted when a input is rejected.
        This method can only be called after the DApp received an advance state request.
        Until the DApp calls the finish method, this method can be called any number of times.
        Calling this method after finishing is undefined behavior.

      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components.yaml#/Report'

      responses:
        '201':
          description: Create the report.

        default:
          description: Error response.
          content:
            text/plain:
              schema:
                $ref: 'components.yaml#/Error'

  /finish:
    post:
      operationId: finish
      summary: Finish the advance state request
      description: |
        This method must be called to finish the advance state request received by the DApp backend.
        The property status in the request body should be either 'accept' or 'reject';
        otherwise, the method will fail and there will be no effect.

        When running inside a Cartesi machine, the Cartesi Server Manager will revert the machine,
        discarting all the vouchers and notices for the current input.
        When running with the Mock, the Mock will discard the vouchers and notices.
        Reports are not discarted in case of reject.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [accept, reject]
                  example: 'accept'

      responses:
        '202':
          description: Accepted the request.

        default:
          description: Error response.
          content:
            text/plain:
              schema:
                $ref: 'components.yaml#/Error'
