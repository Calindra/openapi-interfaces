openapi: 3.0.0

info:
  title: Cartesi HTTP DApp API
  version: 0.1.0
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

  description: |
    API that should be implemented by the Cartesi DApp Backend.

paths:
  /advance:
    post:
      operationId: advance
      summary: Advance state request
      description: |
        The HTTP-Dispatcher requests the DApp to process an input for the given epoch.
        This is an asynchrounos call; the DApp should immediately respond and then start processing the input.
        After the DApp receives this call, it can generate vouchers, notices, and reports by calling the HTTP-Dispatcher API.
        When the DApp finishes processing the input, it should call the finish method from the HTTP-Dispatcher API.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: 'components.yaml#/Metadata'
                payload:
                  $ref: 'components.yaml#/Payload'

      responses:
        '202':
          description: Accepted the request

        default:
          description: Error response
          content:
            text/plain:
              schema:
                $ref: 'components.yaml#/Error'

  /inspect/{payload}:
    get:
      operationId: inspect
      summary: query the DApp
      description: |
        The HTTP-Dispatcher sends a query to the DApp.
        This is a synchrounos call; the DApp responds immediately with the list of reports for the given query.

      parameters:
        - in: path
          required: true
          name: payload
          description: String defined by the DApp developer.
          schema:
            type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: List of reports
                properties:
                  reports:
                    type: array
                    items:
                      $ref: 'components.yaml#/Report'

        default:
          description: Error response
          content:
            text/plain:
              schema:
                $ref: 'components.yaml#/Error'
