openapi: 3.0.0

info:
  title: Cartesi HTTP DApp API
  version: 0.1.1
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

  description: |
    API that should be implemented by the Cartesi DApp Backend.

paths:
  /advance:
    post:
      operationId: advance
      summary: Advance state request
      description: |
        The HTTP-Dispatcher requests the DApp to process an input for the given epoch.
        This is an asynchrounos request.
        After the DApp receives this request, it can generate vouchers, notices, and reports by calling the HTTP-Dispatcher API.
        The DApp may send requests to the HTTP-Dispatcher before responding to this request.
        When the DApp finishes processing the input, it should call the finish method from the HTTP-Dispatcher API.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/Metadata'
                payload:
                  $ref: '#/components/schemas/Payload'

      responses:
        '202':
          description: Accepted the request

        default:
          description: Error response
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'

  /inspect/{payload}:
    get:
      operationId: inspect
      summary: query the DApp
      description: |
        The HTTP-Dispatcher sends a query to the DApp.
        This is a synchrounos call; the DApp responds immediately with the list of reports for the given query.

      parameters:
        - in: path
          required: true
          name: payload
          description: |
            Payload in the Ethereum hex binary format.
            The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
            For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
          schema:
            type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: List of reports
                properties:
                  reports:
                    type: array
                    items:
                      $ref: '#/components/schemas/Report'

        default:
          description: Error response
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Id:
      type: integer
      format: uint64
      description: Identifier encoded as integer.
      example: 123

    Index:
      type: integer
      format: uint64
      description: Position in the Merkle tree.
      example: 123

    Payload:
      type: string
      description: |
        Payload in the Ethereum hex binary format.
        The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
        For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
      example: '0xdeadbeef'

    Timestamp:
      type: integer
      format: uint64
      description: Unix timestamp in milliseconds.
      example: 1609459200000

    Address:
      type: string
      description: Ethereum address.
      example: '0x1111111111111111111111111111111111111111'

    Metadata:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        epoch_number:
          $ref: '#/components/schemas/Id'
        input_number:
          $ref: '#/components/schemas/Id'
        block_number:
          $ref: '#/components/schemas/Id'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    Voucher:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        payload:
          $ref: '#/components/schemas/Payload'

    Notice:
      type: object
      properties:
        payload:
          $ref: '#/components/schemas/Payload'

    Report:
      type: object
      properties:
        payload:
          $ref: '#/components/schemas/Payload'

    Error:
      type: string
      description: Detailed error message.
      example: "The request could not be understood by the server due to malformed syntax"
